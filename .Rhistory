if(uo.smooth[1] != 0) ip <- ip+1
return(ip)
}
#' Internal function for converting a time-to-event distribution to a survival distribution.
#'
get.surv <- function(uo) {
surv.u <- vector()
surv.u[1] <- 1
for(i in 2:(length(uo)+1)) {
surv.u[i] <- surv.u[i-1] - uo[i-1]
}
return(surv.u)
}
#' Internal function for applying the Nadarayaâ€“Watson kernel regression smoother to a time-to-event distribution.
#'
get.smooth.o <- function(z, turnbull.o, time) {
uo <- turnbull.o
if(z < (time[2]-time[1])) {
uo.smooth <- turnbull.o
} else {
uo.smooth <- stats::ksmooth(x = time[-1], y = turnbull.o, kernel = "normal", bandwidth = z, n.points = length(turnbull.o))
uo.smooth <- uo.smooth$y
}
if(sum(uo.smooth, na.rm = T) > 1) {
uo.smooth <- uo.smooth/sum(uo.smooth, na.rm = T)
}
return(uo.smooth)
}
#' Imputation of Event Time
#'
#' Given a data frame or matrix of subject event intervals, this function imputes an estimate
#' of the exact onset time as the expectation given an assumed time-to-event distribution.
#'
#' The output is a vector of predicted event times for the appropriate subjects.
#'
#' @param dat A data.frame or matrix where rows are subjects and columns are left and right interval bounds.
#' @param event.distribution A vector of event probabilities, e.g. the TB.o.smooth.logNe vector output from
#' running the smoothTB function.
#' @param time A vector of event times corresponding to the probabilities in the event.distribution variable,
#' e.g. the time.o vector output from running the smoothTB function.
#' @param type The type of observation(s) you would like to predict. Mutually exclusive options are "LI" (left-
#' and interval-censored observations), "I" (interval-censored observations), "LIR" (left-, interval-, and right-
#' censored observations). Default is "I". Note that depending on the underlying event mechanism, it may be
#' inappropriate to attempt imputation for left- or right-censored subjects.
#'
#' @param n.dec The number of decimal places in the observed data.
#'
#' @export
predict.onset <- function(dat, event.distribution, time, type = "I", n.dec = 2) {
out.pred <- vector()
for(i in 1:nrow(dat)) {
dat.i <- as.numeric(unname(dat[i,]))
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
if(type == "LIR") {
if(is.na(dat.i[2])) {
times <- round(seq(dat.i[1],max(time), by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
if(type == "I") {
if(is.na(dat.i[2]) | is.na(dat.i[1])) {
pred <- NA
} else {
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
out.pred[i] <- pred
}
return(out.pred)
}
devtools::document()
results <- smoothTB(dat = dat, n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
?na.locf
devtools::document()
results <- smoothTB(dat = dat, n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
library(SISE)
results <- smoothTB(dat = dat, n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
#' Internal function for calculating the sBIC
#'
bic.func <- function(z, dat, uo, time, inflection.threshold, k) {
if(z < (time[2]-time[1])) {uo.smooth <- uo
} else {
uo.smooth <- get.smooth.o(z, uo, time)
}
uo.smooth[is.na(uo.smooth)] <- 0
likelihood <- get.likelihood(dat, uo.smooth, time)
#changes in gradient
gc.tmp <- diff(uo.smooth)
#set below threshold to 0
gc.tmp[(abs(gc.tmp)) < inflection.threshold*mean(abs(gc.tmp), na.rm = T) & (abs(gc.tmp)) != 0] <- NA
gc.tmp <- zoo::na.locf(gc.tmp)
#inflection points
ip.tmp <- sign(gc.tmp)
ip <- sum(diff(ip.tmp) != 0) + 1 #for slope
#adds one if the curve doesn't start at 0
if(uo.smooth[1] != 0) ip <- ip+1
#loglik
bic <- -2*(sum(log(likelihood), na.rm = T)) + k*(ip)
return(bic)
}
devtools::document()
results <- smoothTB(dat = dat, n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
str(results)
dat <- bcos[,1:2]
dat$left[dat$left == 0] <- NA
dat$right[is.infinite(dat$right)] <- NA
results <- smoothTB(dat = dat, n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
results <- smoothTB(dat = dat, n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
str(results)
plt.df <- data.frame(age = c(results$time.s, results$time.s),
surv = c(results$TB.o, results$TB.o.smooth.logNe),
method = rep(c("TB", "Smooth TB"), each = length(results$time.s)))
plt.df <- data.frame(age = c(results$time.s, results$time.s),
surv = c(results$TB.s, results$TB.s.smooth.logNe),
method = rep(c("TB", "Smooth TB"), each = length(results$time.s)))
ggplot(plt.df, aes(x = Age, y = Survival, color = Method)) +
geom_step()
library(ggplot2)
ggplot(plt.df, aes(x = Age, y = Survival, color = Method)) +
geom_step()
plt.df <- data.frame(Age = c(results$time.s, results$time.s),
Survival = c(results$TB.s, results$TB.s.smooth.logNe),
Method = factor(rep(c("TB", "Smooth TB"), each = length(results$time.s))))
ggplot(plt.df, aes(x = Age, y = Survival, color = Method)) +
geom_step()
table(bcos$treatment)
results1 <- smoothTB(dat = dat[bcos$treatment == Rad], n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
results1 <- smoothTB(dat = dat[bcos$treatment == "Rad"], n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
results1 <- smoothTB(dat = dat[bcos$treatment == "Rad",], n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
results2 <- smoothTB(dat = dat[bcos$treatment == "RadChem",], n.obs = 5, left.bound = 0, penalty=c('logNe'), n.dec = 0)
plt.df <- data.frame(Age = c(results1$time.s, results2$time.s),
Survival = c(results1$TB.s.smooth.logNe, results2$TB.s.smooth.logNe),
Treatment = factor(rep(c("Rad", "RadChem"), each = length(results$time.s))))
plt.df <- data.frame(Age = c(results1$time.s, results2$time.s),
Survival = c(results1$TB.s.smooth.logNe, results2$TB.s.smooth.logNe),
Treatment = factor(c(rep("Rad", length(results1$TB.s.smooth.logNe)),
rep("RadChem", length(results2$TB.s.smooth.logNe)))))
ggplot(plt.df, aes(x = Age, y = Survival, color = Treatment)) +
geom_step()
plt.df.tb <- data.frame(Age = c(results1$time.s, results2$time.s),
Survival = c(results1$TB.s, results2$TB.s),
Treatment = factor(c(rep("Rad", length(results1$TB.s)),
rep("RadChem", length(results2$TB.s)))))
p2 <- ggplot(plt.df.tb, aes(x = Age, y = Survival, color = Treatment)) +
geom_step()
gridExtra::grid.arrange(p1,p2)
p1 <- ggplot(plt.df, aes(x = Age, y = Survival, color = Treatment)) +
geom_step()
gridExtra::grid.arrange(p1,p2)
plt.df <- data.frame("Time(months)" = c(results1$time.s, results2$time.s),
"Survival" = c(results1$TB.s.smooth.logNe, results2$TB.s.smooth.logNe),
"Treatment" = factor(c(rep("Rad", length(results1$TB.s.smooth.logNe)),
rep("RadChem", length(results2$TB.s.smooth.logNe)))))
p1 <- ggplot(plt.df, aes(x = `Time(months)`, y = Survival, color = Treatment)) +
geom_step()
plt.df.tb <- data.frame("Time(months)" = c(results1$time.s, results2$time.s),
"Survival" = c(results1$TB.s, results2$TB.s),
"Treatment" = factor(c(rep("Rad", length(results1$TB.s)),
rep("RadChem", length(results2$TB.s)))))
p2 <- ggplot(plt.df.tb, aes(x = `Time(months)`, y = Survival, color = Treatment)) +
geom_step()
gridExtra::grid.arrange(p1,p2)
plt.df <- data.frame(Time = c(results1$time.s, results2$time.s),
Survival = c(results1$TB.s.smooth.logNe, results2$TB.s.smooth.logNe),
Treatment = factor(c(rep("Rad", length(results1$TB.s.smooth.logNe)),
rep("RadChem", length(results2$TB.s.smooth.logNe)))))
p1 <- ggplot(plt.df, aes(x = Time, y = Survival, color = Treatment)) +
geom_step()
plt.df.tb <- data.frame(Time = c(results1$time.s, results2$time.s),
Survival = c(results1$TB.s, results2$TB.s),
Treatment = factor(c(rep("Rad", length(results1$TB.s)),
rep("RadChem", length(results2$TB.s)))))
p2 <- ggplot(plt.df.tb, aes(x = Time, y = Survival, color = Treatment)) +
geom_step()
gridExtra::grid.arrange(p1,p2)
p1 <- ggplot(plt.df, aes(x = Time, y = Survival, color = Treatment)) +
geom_step() + theme_bw() + labs(title = " Smoothed Turnbull Estimate", x = "Time (months)")
p2 <- ggplot(plt.df.tb, aes(x = Time, y = Survival, color = Treatment)) +
geom_step() + theme_bw() + labs(title = "Turnbull Estimate", x = "Time (months)")
pred1 <- predict.onset(dat = dat[bcos$treatment == "Rad",],
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "I", n.dec = 0)
pred2 <- predict.onset(dat = dat[bcos$treatment == "RadChem",],
event.distribution = results2$TB.o.smooth.logNe,
time = results2$time.o,
type = "I", n.dec = 0)
plt.pred <- data.frame(onset = c(pred1, pred2),
Treatment = c(rep("Rad", length(pred1)),
rep("RadChem", length(pred2))))
?position
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
geom_histogram(position = "identity", alpha = 0.7)
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
geom_boxplot()
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
geom_histogram(position = "identity", alpha = 0.7)
gridExtra::grid.arrange(p1,p2)
pred1 <- predict.onset(dat = dat[bcos$treatment == "Rad",],
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "LI", n.dec = 0)
pred2 <- predict.onset(dat = dat[bcos$treatment == "RadChem",],
event.distribution = results2$TB.o.smooth.logNe,
time = results2$time.o,
type = "LI", n.dec = 0)
pred1 <- predict.onset(dat = dat[bcos$treatment == "Rad",],
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "LI", n.dec = 0)
dat = dat[bcos$treatment == "Rad",]
event.distribution = results1$TB.o.smooth.logNe
time = results1$time.o
type = "LI"
n.dec = 0
out.pred <- vector()
i = 1
dat.i <- as.numeric(unname(dat[i,]))
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
i = 2
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
i = 3
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
i = 4
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
for(i in 1:nrow(dat)) {
dat.i <- as.numeric(unname(dat[i,]))
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
if(type == "LIR") {
if(is.na(dat.i[2])) {
times <- round(seq(dat.i[1],max(time), by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
if(type == "I") {
if(is.na(dat.i[2]) | is.na(dat.i[1])) {
pred <- NA
} else {
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
out.pred[i] <- pred
}
n.dec
(1/(10^(n.dec)))
dat
i = 3
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
dat.i <- as.numeric(unname(dat[i,]))
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
pred1 <- predict.onset(dat = results1$dat,
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "LI", n.dec = 0)
round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
(match(times, time)-1)
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time)-1)
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
event.distribution[times.p]
times.p <- (match(times, time))
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
#' @param time A vector of event times corresponding to the probabilities in the event.distribution variable,
#' e.g. the time.o vector output from running the smoothTB function.
#' @param type The type of observation(s) you would like to predict. Mutually exclusive options are "LI" (left-
#' and interval-censored observations), "I" (interval-censored observations), "LIR" (left-, interval-, and right-
#' censored observations). Default is "I". Note that depending on the underlying event mechanism, it may be
#' inappropriate to attempt imputation for left- or right-censored subjects.
#'
#' @param n.dec The number of decimal places in the observed data.
#'
#' @export
predict.onset <- function(dat, event.distribution, time, type = "I", n.dec = 2) {
out.pred <- vector()
for(i in 1:nrow(dat)) {
dat.i <- as.numeric(unname(dat[i,]))
if(type == "LI") {
if(is.na(dat.i[2])) {
pred <- NA
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time))
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
if(type == "LIR") {
if(is.na(dat.i[2])) {
times <- round(seq(dat.i[1],max(time), by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time))
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
} else {
if(is.na(dat.i[1])) dat.i[1] <- 1
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time))
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
if(type == "I") {
if(is.na(dat.i[2]) | is.na(dat.i[1])) {
pred <- NA
} else {
times <- round(seq(dat.i[1],dat.i[2], by = (1/(10^(n.dec)))), n.dec)
times.p <- (match(times, time))
event.distribution[event.distribution == 0] <- .Machine$double.eps
pred <- sum(times*event.distribution[times.p]/sum(event.distribution[times.p], na.rm = T), na.rm = T)
}
}
out.pred[i] <- pred
}
return(out.pred)
}
devtools::document()
pred1 <- predict.onset(dat = results1$dat,
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "LI", n.dec = 0)
pred2 <- predict.onset(dat = dat[bcos$treatment == "RadChem",],
event.distribution = results2$TB.o.smooth.logNe,
time = results2$time.o,
type = "LI", n.dec = 0)
plt.pred <- data.frame(onset = c(pred1, pred2),
Treatment = c(rep("Rad", length(pred1)),
rep("RadChem", length(pred2))))
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
geom_histogram(position = "identity", alpha = 0.7)
pred1 <- predict.onset(dat = results1$dat,
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "LI", n.dec = 0)
pred2 <- predict.onset(dat = results1$dat,
event.distribution = results2$TB.o.smooth.logNe,
time = results2$time.o,
type = "LI", n.dec = 0)
plt.pred <- data.frame(onset = c(pred1, pred2),
Treatment = c(rep("Rad", length(pred1)),
rep("RadChem", length(pred2))))
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
geom_histogram(position = "identity", alpha = 0.7)
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
#geom_histogram(position = "identity", alpha = 0.7)
geom_boxplot()
pred1 <- predict.onset(dat = results1$dat,
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "I", n.dec = 0)
pred2 <- predict.onset(dat = results1$dat,
event.distribution = results2$TB.o.smooth.logNe,
time = results2$time.o,
type = "I", n.dec = 0)
plt.pred <- data.frame(onset = c(pred1, pred2),
Treatment = c(rep("Rad", length(pred1)),
rep("RadChem", length(pred2))))
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
#geom_histogram(position = "identity", alpha = 0.7)
geom_boxplot()
pred1 <- predict.onset(dat = results1$dat,
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "I", n.dec = 0)
plt.pred <- data.frame(onset = c(pred1, pred2),
Treatment = c(rep("Rad", length(pred1)),
rep("RadChem", length(pred2))))
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
#geom_histogram(position = "identity", alpha = 0.7)
geom_boxplot()
pred1 <- predict.onset(dat = results1$dat,
event.distribution = results1$TB.o.smooth.logNe,
time = results1$time.o,
type = "LI", n.dec = 0)
pred2 <- predict.onset(dat = results2$dat,
event.distribution = results2$TB.o.smooth.logNe,
time = results2$time.o,
type = "LI", n.dec = 0)
plt.pred <- data.frame(onset = c(pred1, pred2),
Treatment = c(rep("Rad", length(pred1)),
rep("RadChem", length(pred2))))
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
#geom_histogram(position = "identity", alpha = 0.7)
geom_boxplot()
ggplot(plt.pred, aes(x = onset, fill = Treatment)) +
#geom_histogram(position = "identity", alpha = 0.7)
geom_violin()
ggplot(plt.pred, aes(y = onset, fill = Treatment)) +
#geom_histogram(position = "identity", alpha = 0.7)
geom_violin()
ggplot(plt.pred, aes(x = Treatment, y = onset, fill = Treatment)) +
#geom_histogram(position = "identity", alpha = 0.7)
geom_violin()
ggplot(plt.pred, aes(x = Treatment, y = onset, fill = Treatment)) +
geom_histogram(position = "identity", alpha = 0.7)
ggplot(plt.pred, aes(x  = onset, fill = Treatment)) +
geom_histogram(position = "identity", alpha = 0.7)
ggplot(plt.pred, aes(x = Treatment, y = onset, fill = Treatment)) +
geom_violin() +
geom_boxplot(color = "white")
ggplot(plt.pred, aes(x = Treatment, y = onset, fill = Treatment)) +
geom_violin() +
geom_boxplot(fill = "white", alpha = 0.7)
ggplot(plt.pred, aes(x = Treatment, y = onset, fill = Treatment)) +
geom_violin() +
geom_boxplot(fill = "white", alpha = 0.7) +
theme_bw() + labs(title = "Predicted Onset Time Across Treatment Groups",
y = "Time to Onset (months)")
